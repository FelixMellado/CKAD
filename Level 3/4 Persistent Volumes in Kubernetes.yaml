The Nautilus DevOps team is working on a Kubernetes template to deploy a web application on the cluster. There are some requirements to create/use persistent volumes to store the application code, and the template needs to be designed accordingly. Please find more details below:

    Create a PersistentVolume named as pv-datacenter. Configure the spec as storage class should be manual, set capacity to 5Gi, set access mode to ReadWriteOnce, volume type should be hostPath and set path to /mnt/finance (this directory is already created, you might not be able to access it directly, so you need not to worry about it).

    Create a PersistentVolumeClaim named as pvc-datacenter. Configure the spec as storage class should be manual, request 3Gi of the storage, set access mode to ReadWriteOnce.

    Create a pod named as pod-datacenter, mount the persistent volume you created with claim name pvc-datacenter at document root of the web server, the container within the pod should be named as container-datacenter using image httpd with latest tag only (remember to mention the tag i.e httpd:latest).

    Create a node port type service named web-datacenter using node port 30008 to expose the web server running within the pod.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

thor@jumphost ~$ vi persis.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-devops
spec:
  storageClassName: "manual"
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/sysops

thor@jumphost ~$ vi claim.yaml      

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-devops
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi

thor@jumphost ~$ k run pod pod-devops --image=httpd:latest --dry-run=client -o yaml > pod.yaml
thor@jumphost ~$ vi pod.yaml 

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: pod
  name: pod-devops
spec:
  containers:
  - image: httpd:latest
    name: container-devops
    resources: {}
  volumes:
  - name: clvolume
    persistentVolumeClaim:
      claimName: pvc-devops
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

thor@jumphost ~$ k create service nodeport web-devops --tcp=80 --dry-run=client -o yaml > ser.yaml

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    run: pod
  name: web-devops
spec:
  ports:
  - name: web-devops
    port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 30008
  selector:
    run: pod
  type: NodePort
status:
  loadBalancer: {}

thor@jumphost ~$ k apply -f claim.yaml 
persistentvolumeclaim/pvc-devops created
thor@jumphost ~$ k apply -f persis.yaml 
persistentvolume/pv-devops created
thor@jumphost ~$ k apply -f pod.yaml 
pod/pod-devops created
thor@jumphost ~$ k apply -f ser.yaml 
service/web-devops configured